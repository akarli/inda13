import java.util.ArrayList;

/**
 * A simple model of an auction.
 * The auction maintains a list of lots of arbitrary length.
 *
 * @author David J. Barnes and Michael Kölling.
 * @version 2011.07.31
 */
public class Auction{
    // The list of Lots in this auction.
    private ArrayList<Lot> lots;
    // The number that will be given to the next lot entered
    // into this auction.
    private int nextLotNumber;

    /**
     * Create a new auction.
     */
    public Auction(){
        lots = new ArrayList<Lot>();
        nextLotNumber = 1;
    }

    /**
     * Enter a new lot into the auction.
     * @param description A description of the lot.
     */
    public void enterLot(String description){
        lots.add(new Lot(nextLotNumber, description));
        nextLotNumber++;
    }

    /**
     * Show the full list of lots in this auction.
     */
    public void showLots(){
        for(Lot lot : lots) {
            System.out.println(lot.toString());
        }
    }
    
    /**
     * Make a bid for a lot.
     * A message is printed indicating whether the bid is
     * successful or not.
     * 
     * @param lotNumber The lot being bid for.
     * @param bidder The person bidding for the lot.
     * @param value  The value of the bid.
     */
    public void makeABid(int lotNumber, Person bidder, long value){
        Lot selectedLot = getLot(lotNumber);
        if(selectedLot != null) {
            Bid bid = new Bid(bidder, value);
            boolean successful = selectedLot.bidFor(bid);
            if(successful) {
                System.out.println("The bid for lot number " +
                                   lotNumber + " was successful.");
            }
            else {
                // Report which bid is higher.
                Bid highestBid = selectedLot.getHighestBid();
                System.out.println("Lot number: " + lotNumber +
                                   " already has a bid of: " +
                                   highestBid.getValue());
            }
        }
    }

    /**
     * Excercise 4.51.
     * Return the lot with the given number. Return null
     * if a lot with this number does not exist.
     * @param lotNumber The number of the lot to return.
     */
    public Lot getLot(int lotNumber){
        Lot selectedLot = null;
        
        for(Lot searchLot : lots){
           int temp = searchLot.getNumber();
            
            if(temp == lotNumber){
                selectedLot = searchLot;
            }
        }
        
        if(selectedLot != null){
            return selectedLot;
        }
        
        else if(selectedLot == null){
            System.out.println("There is no lot with this number.");
        }
        
        return selectedLot;
    }
         
    
    
    
    /**
     * Exercise 4.48.
     * Prints information about the lots. Highest bid, buyer and description.
     */
    public void close(){
    
        for(Lot searchLot : lots){
            Bid temp = searchLot.getHighestBid();
            
            if(temp == null){
                System.out.println("Lot number " + searchLot.getNumber() + " is not sold yet.");
            }
            else if(temp != null){
                System.out.println("Lot number " + searchLot.getNumber() + " was sold to " + searchLot.highestBid.getBidder().getName() + " for " + searchLot.highestBid.getValue());
            }
        }
    }
    
    /**
     * Exercise 4.49.
     * Puts all unsold lots into a new ArrayList.
     */
    public ArrayList<Lot> unSold(){
        ArrayList<Lot> unsoldLots = new ArrayList<Lot>();
        
        for(Lot searchLot : lots){
            Bid temp = searchLot.highestBid;
            if(temp == null){
                unsoldLots.add(searchLot);
            }
        }
        
        return unsoldLots;
    }
    
    /**
     * Exercise 4.50
     * Som getLot-metoden ser ut nu så hämtar den den Lot som ligger på det angivna värdet - 1. Det gör att den första loten man lagt till får number 1 men hamnar på plats 0. Därför får man rätt lot om då man skriver dess number.
     * Om en lot skulle försvinna skulle alla kvarvarande lots som låg efter den borttagna, flyttas ett steg "uppåt" i listan. Detta gör att vi inte kommer att kunna få rätt lot då vi skriver in dess värde.
     */
    
    /**
     * Exercise 4.52
     * Remove the lot with the given lot number.
     * @param number The number of the lot to be removed.
     * @return The Lot with the given number, or null if there is no such lot.
     */
    public Lot removeLot(int number){
        Lot lotToRemove = null;
        for(Lot searchLot : lots){
            int temp = searchLot.getNumber();
            
            if(temp == number){
                lotToRemove = searchLot;
            }
        }
        
        if(lotToRemove == null){
            System.out.println("There is no lot with that number.");
            return lotToRemove;
        }
        else if(lotToRemove != null){
            lots.remove(lotToRemove);
            return lotToRemove;
        }
        return lotToRemove;

    }
    
    
}
