import java.util.ArrayList;

/**
 * A simple model of an auction.
 * The auction maintains a list of lots of arbitrary length.
 *
 * @author David J. Barnes and Michael KÃ¶lling.
 * @version 2011.07.31
 */
public class Auction
{
    // The list of Lots in this auction.
    private ArrayList<Lot> lots;
    // The number that will be given to the next lot entered
    // into this auction.
    private int nextLotNumber;

    /**
     * Create a new auction.
     */
    public Auction()
    {
        lots = new ArrayList<Lot>();
        nextLotNumber = 1;
    }

    /**
     * Enter a new lot into the auction.
     * @param description A description of the lot.
     */
    public void enterLot(String description)
    {
        lots.add(new Lot(nextLotNumber, description));
        nextLotNumber++;
    }

    /**
     * Show the full list of lots in this auction.
     */
    public void showLots()
    {
        for(Lot lot : lots) {
            System.out.println(lot.toString());
        }
    }
    
    /**
     * Make a bid for a lot.
     * A message is printed indicating whether the bid is
     * successful or not.
     * 
     * @param lotNumber The lot being bid for.
     * @param bidder The person bidding for the lot.
     * @param value  The value of the bid.
     */
    public void makeABid(int lotNumber, Person bidder, long value)
    {
        Lot selectedLot = getLot(lotNumber);
        if(selectedLot != null) {
            Bid bid = new Bid(bidder, value);
            boolean successful = selectedLot.bidFor(bid);
            if(successful) {
                System.out.println("The bid for lot number " +
                                   lotNumber + " was successful.");
            }
            else {
                // Report which bid is higher.
                Bid highestBid = selectedLot.getHighestBid();
                System.out.println("Lot number: " + lotNumber +
                                   " already has a bid of: " +
                                   highestBid.getValue());
            }
        }
        else
        System.out.println("This lot has been removed from the auction");
    }

    /**
     * Return the lot with the given number. Return null
     * if a lot with this number does not exist.
     * @param lotNumber The number of the lot to return.
     */
    public Lot getLot(int lotNumber)
    {
        if((lotNumber >= 1) && (lotNumber < nextLotNumber)) {
            // The number seems to be reasonable.
            Lot selectedLot = null;
            for(Lot lot: lots){
                if(lotNumber == lot.getNumber()){
                    selectedLot = lot;
                }
            }
            return selectedLot;
        }
        else {
            System.out.println("Lot number: " + lotNumber +
                               " does not exist.");
            return null;
        }
    }
    public void close(){
        System.out.println("asd");
        for(Lot lot : lots){
            if(lot.getHighestBid() == null){
                System.out.println("This lot has not yet been sold");
            }
            else if(lot.getHighestBid() != null){
                System.out.println("This lot has been sold for " + 
                lot.getHighestBid().getValue() + "$ to " + 
                lot.getHighestBid().getBidder().getName());
            }
        }
    }
    /**
     * Remove the lot with the given lot number.
     * @param number The number of the lot to be removed.
     * @return The lot with the given number, or null if
     * there is no such lot
     */
    public void removeLot(int number){
        if((number >= 1) && (number < nextLotNumber)){
            for(int i = 0; i<lots.size();i++){
                if(number == lots.get(i).getNumber()){
                    lots.remove(i);
                    i = lots.size();
                }
            }
        }
        else{
            System.out.println("Lot number: " + number + " does not exist.");
        }
    }
    public ArrayList<Lot> getUnsold(){
        ArrayList<Lot> getUnsold = new ArrayList<Lot>();
        for(Lot lot : lots){
            if(lot.getHighestBid() == null){
                getUnsold.add(lot);
            }
        }
        return getUnsold;
    }
}
